{"version":3,"file":"EvaluateConditionVisitor.js","names":["EDateTimeUnits","EvaluateConditionVisitor","fieldTokens","setFieldTokensScope","tokens","isArray","fieldTokensScope","getScope","result","token","fieldName","fieldType","EFieldType","complex","children","acceptableFieldTypes","every","ft","includes","Error","join","conditionFieldName","relevantTokens","length","ctx","inputStream","start","source","getText","stop","res","triggeredFieldTokens","add","evaluationResult","Set","rawValue","parsedValue","match","parsedUnit","value","unit","toLowerCase","D","M","Y","tokenUnit","rowTokenValue","conditionUnit","rowConditionValue","tokenValue","Number","conditionValue","opCtx","GT","GE","LT","LE","EQ","fieldValue","undefined","decimal","integer","timestamp","ais","enum","string","enum_list","image","hasOwnProperty","images","vehicleImpactType","Object","keys","token1","token2","getTime","arr1","arr2","isArraysEqual","obj1","obj2","deepEqual","t1ValCopy","passengerPositions","impactSides","t2ValCopy","Array","a1","expr","e","leftExprResult","rightExprResult","isOrOperator","binary","OR","isTruthy","field","getRelevantFieldTokens","checkFieldType","comparator","number","getConditionValue","dateTime","operatorCtx","op","isString","dateTimeValueParse","rowCondValue","condUnit","isValuesAndUnitsNotNull","converterResult","dateTimeValueConverter","compare","truthifyResult","isNumeric","isTokenValueEmpty","numbers","map","nCtx","String","not","values","vCtx","isEnumList","fv","cv","count","conditionValueCount","tokensForCount","filter","rt","reduce","uniqueNameTokens","unt","push","parentTokens","countComplex","conditionResultsCount","distinctFieldName","DISTINCT","distinctFieldTokens","childTokens","truthyParentResultsCount","originScope","parentLoop","parentToken","parentResult","childTokensBuffer","childToken","some","distinctToken","isTokenValuesEqual","vehicleImpact","INT","tokenValueLC","tv","conditionValues","T6TriggerVisitor"],"sources":["../src/EvaluateConditionVisitor.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport T6TriggerVisitor from './gen/T6TriggerVisitor';\nimport { FieldTokenModel } from './FieldTokenModel';\nimport {\n  AnyExprCtx,\n  BinaryExprCtx,\n  ComparatorExprCtx,\n  ComplexExprCtx,\n  CountComplexExprCtx,\n  CountExprCtx,\n  DateTimeCtx,\n  EFieldType,\n  EmptyExprCtx,\n  IImageDataValue,\n  IVehicleDataValue,\n  NotExprCtx,\n  NumberCtx,\n  NumberExprCtx,\n  NumbersExprCtx,\n  OpCtx,\n  ParenExprCtx,\n  ParseCtx,\n  ValueCtx,\n  ValueExprCtx,\n  ValuesExprCtx,\n  VehicleImpactExprCtx,\n} from './types';\n\ntype TFieldName = string;\ntype TFieldTokensArr = FieldTokenModel[];\ntype TFieldTokensScope = Record<TFieldName, FieldTokenModel[]>;\ntype TFieldTokens = TFieldTokensArr | TFieldTokensScope;\ninterface ITruthyEvaluationResult {\n  evaluationResult: true;\n  triggeredFieldTokens: Set<FieldTokenModel>;\n}\ntype TEvaluationResult = ITruthyEvaluationResult | null;\nenum EDateTimeUnits {\n  D = 'd',\n  M = 'm',\n  Y = 'y',\n}\n\nexport class EvaluateConditionVisitor extends T6TriggerVisitor {\n  private fieldTokensScope: TFieldTokensScope = {};\n  evaluationResult: boolean = false;\n  triggeredFieldTokens: FieldTokenModel[] | null = null;\n\n  constructor(fieldTokens: TFieldTokens) {\n    super();\n    this.setFieldTokensScope(fieldTokens);\n  }\n\n  private setFieldTokensScope(tokens: TFieldTokens) {\n    if (this.isArray(tokens)) {\n      this.fieldTokensScope = getScope(tokens);\n    } else {\n      this.fieldTokensScope = { ...tokens };\n    }\n\n    function getScope(tokens: FieldTokenModel[], result: TFieldTokensScope = {}) {\n      for (const token of tokens) {\n        result[token.fieldName] = result[token.fieldName]\n          ? [...result[token.fieldName], token]\n          : [token];\n\n        if (token.fieldType === EFieldType.complex) {\n          getScope(token.children, result);\n        }\n      }\n\n      return result;\n    }\n  }\n\n  private checkFieldType<T>(\n    fieldTokens: FieldTokenModel[],\n    acceptableFieldTypes: EFieldType[]\n  ): asserts fieldTokens is FieldTokenModel<T>[] {\n    if (!fieldTokens.every((ft) => acceptableFieldTypes.includes(ft.fieldType))) {\n      throw new Error(\n        `Incorrect model type for [${fieldTokens[0].fieldName}]: actual - [${\n          fieldTokens[0].fieldType\n        }], requested - [${acceptableFieldTypes.join('|')}]`\n      );\n    }\n  }\n\n  private getRelevantFieldTokens(conditionFieldName: string) {\n    const relevantTokens = this.fieldTokensScope[conditionFieldName];\n    return relevantTokens && relevantTokens.length > 0 ? relevantTokens : null;\n  }\n\n  private getConditionValue(ctx: ValueCtx | NumberCtx | DateTimeCtx) {\n    const inputStream = ctx.start.source[1];\n    if (!inputStream) throw new Error('InputStream is missing in TokenSourceTuple');\n\n    return inputStream.getText(ctx.start.start, ctx.stop.stop);\n  }\n\n  private truthifyResult(result: TEvaluationResult, token: FieldTokenModel) {\n    if (result) {\n      const res = { ...result };\n      res.triggeredFieldTokens = res.triggeredFieldTokens.add(token);\n      return res;\n    } else {\n      return {\n        evaluationResult: true,\n        triggeredFieldTokens: new Set<FieldTokenModel>().add(token),\n      } as ITruthyEvaluationResult;\n    }\n  }\n\n  private dateTimeValueParse(rawValue: string) {\n    const parsedValue = rawValue.match(/^[1-9]\\d*/);\n    const parsedUnit = rawValue.match(/[a-z]+$/i);\n\n    const value = parsedValue ? parsedValue[0] : parsedValue;\n    let unit = parsedUnit ? parsedUnit[0].toLowerCase() : parsedUnit;\n\n    switch (unit) {\n      case 'day':\n      case 'days':\n        unit = EDateTimeUnits.D;\n        break;\n      case 'month':\n      case 'months':\n        unit = EDateTimeUnits.M;\n        break;\n      case 'year':\n      case 'years':\n        unit = EDateTimeUnits.Y;\n    }\n\n    return { value, unit };\n  }\n\n  private dateTimeValueConverter(\n    tokenUnit: string,\n    rowTokenValue: string,\n    conditionUnit: string,\n    rowConditionValue: string\n  ) {\n    const tokenValue = Number(rowTokenValue);\n    const conditionValue = Number(rowConditionValue);\n\n    if (tokenUnit === conditionUnit) {\n      return { tokenValue, conditionValue };\n    } else if (tokenUnit === EDateTimeUnits.D && conditionUnit === EDateTimeUnits.M) {\n      return { tokenValue: tokenValue / 30, conditionValue };\n    } else if (tokenUnit === EDateTimeUnits.D && conditionUnit === EDateTimeUnits.Y) {\n      return { tokenValue: tokenValue / 360, conditionValue };\n    } else if (tokenUnit === EDateTimeUnits.M && conditionUnit === EDateTimeUnits.D) {\n      return { tokenValue: tokenValue * 30, conditionValue };\n    } else if (tokenUnit === EDateTimeUnits.M && conditionUnit === EDateTimeUnits.Y) {\n      return { tokenValue: tokenValue / 12, conditionValue };\n    } else if (tokenUnit === EDateTimeUnits.Y && conditionUnit === EDateTimeUnits.D) {\n      return { tokenValue: tokenValue * 360, conditionValue };\n    } else if (tokenUnit === EDateTimeUnits.Y && conditionUnit === EDateTimeUnits.M) {\n      return { tokenValue: tokenValue * 12, conditionValue };\n    }\n  }\n\n  private compare(opCtx: OpCtx, tokenValue: number, conditionValue: number) {\n    if (opCtx.GT()) return tokenValue > conditionValue;\n    if (opCtx.GE()) return tokenValue >= conditionValue;\n    if (opCtx.LT()) return tokenValue < conditionValue;\n    if (opCtx.LE()) return tokenValue <= conditionValue;\n    if (opCtx.EQ()) return tokenValue === conditionValue;\n\n    return false;\n  }\n\n  private isTruthy(result: TEvaluationResult): result is ITruthyEvaluationResult {\n    return result !== null;\n  }\n\n  private isTokenValueEmpty(token: FieldTokenModel) {\n    const { fieldType, fieldValue } = token;\n\n    switch (fieldType) {\n      case EFieldType.complex:\n        return fieldValue === undefined;\n      case EFieldType.decimal:\n      case EFieldType.integer:\n      case EFieldType.timestamp:\n        return fieldValue === null;\n      case EFieldType.ais:\n      case EFieldType.enum:\n      case EFieldType.string:\n        return fieldValue === '';\n\n      case EFieldType.enum_list:\n        try {\n          return (fieldValue as string[]).length === 0;\n        } catch {\n          throw new Error(\n            'Check the value for the enum_list type field. It must be like array literal - []'\n          );\n        }\n\n      case EFieldType.image:\n        try {\n          return (\n            (fieldValue as IImageDataValue).hasOwnProperty('images') &&\n            (fieldValue as IImageDataValue).images.length === 0\n          );\n        } catch {\n          throw new Error(\n            'Check the value for the image type field. It must be like this object literal - { images: [] }'\n          );\n        }\n\n      case EFieldType.vehicleImpactType:\n        try {\n          return Object.keys(fieldValue as IVehicleDataValue).length === 0;\n        } catch {\n          throw new Error(\n            'Check the value for the vehicleImpactType field. It must be like object literal - {}'\n          );\n        }\n\n      default:\n        throw new Error('Check the fieldType for the value');\n    }\n  }\n\n  private isTokenValuesEqual(token1: FieldTokenModel, token2: FieldTokenModel) {\n    let fieldType: EFieldType;\n\n    if (token1.fieldType === token2.fieldType) {\n      fieldType = token1.fieldType;\n    } else {\n      throw new Error('Field types must be equal');\n    }\n\n    switch (fieldType) {\n      case EFieldType.ais:\n      case EFieldType.enum:\n      case EFieldType.string:\n      case EFieldType.decimal:\n      case EFieldType.integer:\n        return token1.fieldValue === token2.fieldValue;\n\n      case EFieldType.timestamp:\n        try {\n          return token1.fieldValue === null || token2.fieldValue === null\n            ? token1.fieldValue === token2.fieldValue\n            : (token1.fieldValue as Date).getTime() === (token2.fieldValue as Date).getTime();\n        } catch {\n          throw new Error('Check the value for the timestamp type. It must be Date type');\n        }\n\n      case EFieldType.enum_list:\n        try {\n          const arr1 = token1.fieldValue as string[];\n          const arr2 = token2.fieldValue as string[];\n          return this.isArraysEqual(arr1, arr2);\n        } catch {\n          throw new Error(\n            'Check the value for the enum_list type field. It must be like array literal - []'\n          );\n        }\n\n      case EFieldType.image:\n        try {\n          const obj1 = token1.fieldValue as IImageDataValue;\n          const obj2 = token2.fieldValue as IImageDataValue;\n          return deepEqual(obj1, obj2);\n        } catch {\n          throw new Error(\n            'Check the value for the image type field. It must be like this object literal - { images: [] }'\n          );\n        }\n\n      case EFieldType.vehicleImpactType:\n        try {\n          const t1ValCopy = { ...(token1.fieldValue as IVehicleDataValue) };\n          delete t1ValCopy.passengerPositions;\n          delete t1ValCopy.impactSides;\n\n          const t2ValCopy = { ...(token2.fieldValue as IVehicleDataValue) };\n          delete t2ValCopy.passengerPositions;\n          delete t2ValCopy.impactSides;\n\n          if (deepEqual(t1ValCopy, t2ValCopy)) {\n            return (\n              this.isArraysEqual(\n                (token1.fieldValue as IVehicleDataValue).passengerPositions ?? [],\n                (token2.fieldValue as IVehicleDataValue).passengerPositions ?? []\n              ) &&\n              this.isArraysEqual(\n                (token1.fieldValue as IVehicleDataValue).impactSides ?? [],\n                (token2.fieldValue as IVehicleDataValue).impactSides ?? []\n              )\n            );\n          }\n\n          return false;\n        } catch {\n          throw new Error(\n            'Check the value for the vehicleImpactType field. It must be like object literal - {}'\n          );\n        }\n\n      default:\n        throw new Error('Check the fieldType for the value');\n    }\n  }\n\n  private isArray(fieldTokens: TFieldTokens): fieldTokens is TFieldTokensArr {\n    return Array.isArray(fieldTokens);\n  }\n\n  private isArraysEqual(arr1: unknown[], arr2: unknown[]) {\n    return arr1.length === arr2.length && arr1.every((a1) => arr2.includes(a1));\n  }\n\n  private isNumeric(token: FieldTokenModel): token is FieldTokenModel<number | null> {\n    return token.fieldType === EFieldType.integer || token.fieldType === EFieldType.decimal;\n  }\n\n  private isString(token: FieldTokenModel): token is FieldTokenModel<string> {\n    return (\n      token.fieldType === EFieldType.ais ||\n      token.fieldType === EFieldType.enum ||\n      token.fieldType === EFieldType.string\n    );\n  }\n\n  private isEnumList(token: FieldTokenModel): token is FieldTokenModel<string[]> {\n    return token.fieldType === EFieldType.enum_list;\n  }\n\n  override visitParse(ctx: ParseCtx) {\n    try {\n      const res = super.visit(ctx.expr()) as TEvaluationResult;\n\n      if (res) {\n        const { evaluationResult, triggeredFieldTokens } = res;\n        this.evaluationResult = evaluationResult;\n        this.triggeredFieldTokens = [...triggeredFieldTokens];\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  override visitBinaryExpr(ctx: BinaryExprCtx) {\n    let res: TEvaluationResult = null;\n    const leftExprResult = super.visit(ctx.expr(0)) as TEvaluationResult;\n    const rightExprResult = super.visit(ctx.expr(1)) as TEvaluationResult;\n\n    const isOrOperator = !!ctx.binary().OR();\n\n    if (isOrOperator) {\n      if (this.isTruthy(leftExprResult) && this.isTruthy(rightExprResult)) {\n        res = {\n          evaluationResult: true,\n          triggeredFieldTokens: new Set([\n            ...leftExprResult.triggeredFieldTokens,\n            ...rightExprResult.triggeredFieldTokens,\n          ]),\n        };\n        return res;\n      } else if (this.isTruthy(leftExprResult)) {\n        return leftExprResult;\n      } else if (this.isTruthy(rightExprResult)) {\n        return rightExprResult;\n      } else {\n        return res;\n      }\n    } else {\n      if (this.isTruthy(leftExprResult) && this.isTruthy(rightExprResult)) {\n        res = {\n          evaluationResult: true,\n          triggeredFieldTokens: new Set([\n            ...leftExprResult.triggeredFieldTokens,\n            ...rightExprResult.triggeredFieldTokens,\n          ]),\n        };\n        return res;\n      } else {\n        return res;\n      }\n    }\n  }\n\n  override visitComparatorExpr(ctx: ComparatorExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.string, EFieldType.integer, EFieldType.decimal];\n    this.checkFieldType<string | number | null>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = ctx.comparator().number()\n      ? this.getConditionValue(ctx.comparator().number())\n      : this.getConditionValue(ctx.comparator().dateTime());\n\n    const operatorCtx = ctx.comparator().op();\n\n    for (const token of relevantTokens) {\n      if (this.isString(token)) {\n        const { value: rowTokenValue, unit: tokenUnit } = this.dateTimeValueParse(token.fieldValue);\n        const { value: rowCondValue, unit: condUnit } = this.dateTimeValueParse(conditionValue);\n\n        // prettier-ignore\n        const isValuesAndUnitsNotNull = rowTokenValue !== null &&\n          tokenUnit !== null &&\n          rowCondValue !== null &&\n          condUnit !== null;\n\n        if (isValuesAndUnitsNotNull) {\n          const converterResult = this.dateTimeValueConverter(\n            tokenUnit,\n            rowTokenValue,\n            condUnit,\n            rowCondValue\n          );\n\n          if (converterResult) {\n            const { tokenValue, conditionValue } = converterResult;\n\n            if (this.compare(operatorCtx, tokenValue, conditionValue)) {\n              res = this.truthifyResult(res, token);\n            }\n          }\n        }\n      } else if (\n        this.isNumeric(token) &&\n        token.fieldValue !== null &&\n        this.compare(operatorCtx, token.fieldValue, Number(conditionValue))\n      ) {\n        res = this.truthifyResult(res, token);\n      }\n    }\n\n    return res;\n  }\n\n  override visitAnyExpr(ctx: AnyExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    for (const token of relevantTokens) {\n      if (!this.isTokenValueEmpty(token)) {\n        res = this.truthifyResult(res, token);\n      }\n    }\n\n    return res;\n  }\n\n  override visitEmptyExpr(ctx: EmptyExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n\n    if (relevantTokens) {\n      for (const token of relevantTokens) {\n        if (this.isTokenValueEmpty(token)) {\n          res = this.truthifyResult(res, token);\n        }\n      }\n    } else {\n      res = {\n        evaluationResult: true,\n        triggeredFieldTokens: new Set(),\n      };\n    }\n\n    return res;\n  }\n\n  override visitNumberExpr(ctx: NumberExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.ais, EFieldType.integer, EFieldType.decimal];\n    this.checkFieldType<string | number | null>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = this.getConditionValue(ctx.number());\n\n    for (const token of relevantTokens) {\n      if (this.isString(token) && token.fieldValue === conditionValue) {\n        res = this.truthifyResult(res, token);\n      } else if (\n        this.isNumeric(token) &&\n        token.fieldValue !== null &&\n        token.fieldValue === Number(conditionValue)\n      ) {\n        res = this.truthifyResult(res, token);\n      }\n    }\n\n    return res;\n  }\n\n  override visitNumbersExpr(ctx: NumbersExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.ais, EFieldType.integer, EFieldType.decimal];\n    this.checkFieldType<string | number | null>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = ctx\n      .numbers()\n      .number()\n      .map((nCtx) => this.getConditionValue(nCtx));\n\n    for (const token of relevantTokens) {\n      if (this.isString(token) && conditionValue.includes(token.fieldValue)) {\n        res = this.truthifyResult(res, token);\n      } else if (\n        this.isNumeric(token) &&\n        token.fieldValue !== null &&\n        conditionValue.includes(String(token.fieldValue))\n      ) {\n        res = this.truthifyResult(res, token);\n      }\n    }\n\n    return res;\n  }\n\n  override visitNotExpr(ctx: NotExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [\n      EFieldType.ais,\n      EFieldType.integer,\n      EFieldType.decimal,\n      EFieldType.string,\n      EFieldType.enum,\n      EFieldType.enum_list,\n    ];\n    this.checkFieldType<number | string | string[] | null>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = ctx.not().numbers()\n      ? ctx\n          .not()\n          .numbers()\n          .number()\n          .map((nCtx) => this.getConditionValue(nCtx))\n      : ctx\n          .not()\n          .values()\n          .value()\n          .map((vCtx) => this.getConditionValue(vCtx).toLowerCase());\n\n    for (const token of relevantTokens) {\n      if (this.isString(token) && !conditionValue.includes(token.fieldValue.toLowerCase())) {\n        res = this.truthifyResult(res, token);\n      } else if (this.isNumeric(token) && !conditionValue.includes(String(token.fieldValue))) {\n        res = this.truthifyResult(res, token);\n      } else if (this.isEnumList(token)) {\n        const tokenValue = token.fieldValue.map((fv) => fv.toLowerCase());\n\n        if (conditionValue.every((cv) => !tokenValue.includes(cv))) {\n          res = this.truthifyResult(res, token);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  override visitComplexExpr(ctx: ComplexExprCtx) {\n    return super.visit(ctx.complex().expr()) as TEvaluationResult;\n  }\n\n  override visitCountExpr(ctx: CountExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.string, EFieldType.enum];\n    this.checkFieldType<string>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = ctx.count().value() ? this.getConditionValue(ctx.count().value()) : null; // null = $DISTINCT\n    const operatorCtx = ctx.count().comparator().op();\n    const conditionValueCount = this.getConditionValue(ctx.count().comparator().number());\n    const tokensForCount = conditionValue\n      ? relevantTokens.filter((rt) => rt.fieldValue === conditionValue)\n      : relevantTokens.reduce((uniqueNameTokens, rt) => {\n          if (uniqueNameTokens.every((unt) => unt.fieldValue !== rt.fieldValue)) {\n            uniqueNameTokens.push(rt);\n          }\n\n          return uniqueNameTokens;\n        }, [] as FieldTokenModel<string>[]);\n\n    if (this.compare(operatorCtx, tokensForCount.length, Number(conditionValueCount))) {\n      for (const token of tokensForCount) {\n        res = this.truthifyResult(res, token);\n      }\n    }\n\n    return res;\n  }\n\n  override visitCountComplexExpr(ctx: CountComplexExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const parentTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!parentTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.complex];\n    this.checkFieldType<undefined>(parentTokens, acceptableFieldTypes);\n\n    const operatorCtx = ctx.countComplex().comparator().op();\n    const conditionResultsCount = this.getConditionValue(ctx.countComplex().comparator().number());\n    const distinctFieldName = ctx.countComplex().DISTINCT()\n      ? ctx.countComplex().field().getText()\n      : null;\n    const distinctFieldTokens: FieldTokenModel[] = [];\n    let childTokens: FieldTokenModel[] = [];\n    let truthyParentResultsCount = 0;\n\n    const originScope = this.fieldTokensScope;\n\n    parentLoop: for (const parentToken of parentTokens) {\n      this.setFieldTokensScope(parentToken.children);\n      const parentResult = super.visit(ctx.countComplex().expr()) as TEvaluationResult;\n\n      if (this.isTruthy(parentResult) && distinctFieldName) {\n        const childTokensBuffer = [];\n\n        for (const childToken of parentResult.triggeredFieldTokens) {\n          if (\n            childToken.fieldName === distinctFieldName &&\n            distinctFieldTokens.some((distinctToken) => {\n              return this.isTokenValuesEqual(distinctToken, childToken);\n            })\n          ) {\n            continue parentLoop;\n          } else if (childToken.fieldName === distinctFieldName) {\n            distinctFieldTokens.push(childToken);\n            childTokensBuffer.push(childToken);\n          } else {\n            childTokensBuffer.push(childToken);\n          }\n        }\n\n        if (childTokensBuffer.length > 0) {\n          truthyParentResultsCount++;\n          childTokens = [...childTokens, ...childTokensBuffer];\n        }\n      } else if (this.isTruthy(parentResult)) {\n        truthyParentResultsCount++;\n        childTokens = [...childTokens, ...parentResult.triggeredFieldTokens];\n      }\n    }\n\n    this.setFieldTokensScope(originScope);\n\n    if (this.compare(operatorCtx, truthyParentResultsCount, Number(conditionResultsCount))) {\n      res = {\n        evaluationResult: true,\n        triggeredFieldTokens: new Set<FieldTokenModel>(childTokens),\n      };\n\n      return res;\n    }\n\n    return res;\n  }\n\n  override visitParenExpr(ctx: ParenExprCtx) {\n    return super.visit(ctx.expr()) as TEvaluationResult;\n  }\n\n  override visitVehicleImpactExpr(ctx: VehicleImpactExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.vehicleImpactType];\n    this.checkFieldType<IVehicleDataValue>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = ctx.vehicleImpact().INT().getText();\n\n    for (const token of relevantTokens) {\n      if (token.fieldValue.impactSides?.includes(Number(conditionValue))) {\n        res = this.truthifyResult(res, token);\n      }\n    }\n\n    return res;\n  }\n\n  override visitValueExpr(ctx: ValueExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.string, EFieldType.enum, EFieldType.enum_list];\n    this.checkFieldType<string | string[]>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValue = this.getConditionValue(ctx.value());\n\n    for (const token of relevantTokens) {\n      if (this.isEnumList(token)) {\n        const tokenValueLC = token.fieldValue.map((tv) => tv.toLowerCase());\n\n        if (tokenValueLC.includes(conditionValue.toLowerCase())) {\n          res = this.truthifyResult(res, token);\n        }\n      } else if (this.isString(token)) {\n        if (token.fieldValue.toLowerCase() === conditionValue.toLowerCase()) {\n          res = this.truthifyResult(res, token);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  override visitValuesExpr(ctx: ValuesExprCtx) {\n    let res: TEvaluationResult = null;\n    const conditionFieldName = ctx.field().getText();\n    const relevantTokens = this.getRelevantFieldTokens(conditionFieldName);\n    if (!relevantTokens) return res;\n\n    const acceptableFieldTypes = [EFieldType.string, EFieldType.enum, EFieldType.enum_list];\n    this.checkFieldType<string | string[]>(relevantTokens, acceptableFieldTypes);\n\n    const conditionValues = ctx\n      .values()\n      .value()\n      .map((vCtx) => this.getConditionValue(vCtx).toLowerCase());\n\n    for (const token of relevantTokens) {\n      if (this.isEnumList(token)) {\n        const tokenValue = token.fieldValue.map((tv) => tv.toLowerCase());\n\n        if (conditionValues.some((cv) => tokenValue.includes(cv))) {\n          res = this.truthifyResult(res, token);\n        }\n      } else if (this.isString(token)) {\n        if (conditionValues.includes(token.fieldValue.toLowerCase())) {\n          res = this.truthifyResult(res, token);\n        }\n      }\n    }\n\n    return res;\n  }\n}\n"],"mappings":"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"}