{"version":3,"file":"types.js","names":["ParseCtx","T6TriggerParser","ParseContext","ExprCtx","ExprContext","NumbersExprCtx","NumbersExprContext","ComparatorExprCtx","ComparatorExprContext","ComplexExprCtx","ComplexExprContext","NumberExprCtx","NumberExprContext","BinaryExprCtx","BinaryExprContext","ParenExprCtx","ParenExprContext","CountExprCtx","CountExprContext","NotExprCtx","NotExprContext","CountComplexExprCtx","CountComplexExprContext","ValueExprCtx","ValueExprContext","EmptyExprCtx","EmptyExprContext","VehicleImpactExprCtx","VehicleImpactExprContext","ValuesExprCtx","ValuesExprContext","AnyExprCtx","AnyExprContext","DateTimeCtx","DateTimeContext","VehicleImpactCtx","VehicleImpactContext","NumberCtx","NumberContext","NumbersCtx","NumbersContext","FieldCtx","FieldContext","OpCtx","OpContext","ComparatorCtx","ComparatorContext","BinaryCtx","BinaryContext","NotCtx","NotContext","ComplexCtx","ComplexContext","CountCtx","CountContext","CountComplexCtx","CountComplexContext","ValueCtx","ValueContext","ValuesCtx","ValuesContext","EFieldType","ESource"],"sources":["../src/types.ts"],"sourcesContent":["import type TerminalNode from 'antlr4/tree/TerminalNode';\nimport T6TriggerParser from './gen/T6TriggerParser';\n\ntype TTerminalNodes = TerminalNode[] | [];\n\nexport abstract class ParseCtx extends T6TriggerParser.ParseContext {\n}\n\nexport abstract class ExprCtx extends T6TriggerParser.ExprContext {\n  abstract children: unknown[];\n}\n\n/** ExprContext alternatives */\nexport abstract class NumbersExprCtx extends T6TriggerParser.NumbersExprContext {\n  abstract override numbers(): NumbersCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class ComparatorExprCtx extends T6TriggerParser.ComparatorExprContext {\n  abstract override comparator(): ComparatorCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class ComplexExprCtx extends T6TriggerParser.ComplexExprContext {\n  abstract override complex(): ComplexCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class NumberExprCtx extends T6TriggerParser.NumberExprContext {\n  abstract override number(): NumberCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class BinaryExprCtx extends T6TriggerParser.BinaryExprContext {\n  abstract override expr: <T>(i?: T) => T extends number ? ExprCtx : ExprCtx[];\n\n  abstract override binary(): BinaryCtx;\n}\n\nexport abstract class ParenExprCtx extends T6TriggerParser.ParenExprContext {\n  abstract override expr(): ExprCtx;\n}\n\nexport abstract class CountExprCtx extends T6TriggerParser.CountExprContext {\n  abstract override count(): CountCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class NotExprCtx extends T6TriggerParser.NotExprContext {\n  abstract override not(): NotCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class CountComplexExprCtx extends T6TriggerParser.CountComplexExprContext {\n  abstract override countComplex(): CountComplexCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class ValueExprCtx extends T6TriggerParser.ValueExprContext {\n  abstract override value(): ValueCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class EmptyExprCtx extends T6TriggerParser.EmptyExprContext {\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class VehicleImpactExprCtx extends T6TriggerParser.VehicleImpactExprContext {\n  abstract override vehicleImpact(): VehicleImpactCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class ValuesExprCtx extends T6TriggerParser.ValuesExprContext {\n  abstract override values(): ValuesCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class AnyExprCtx extends T6TriggerParser.AnyExprContext {\n  abstract override field(): FieldCtx;\n}\n\n/** Accessory */\nexport abstract class DateTimeCtx extends T6TriggerParser.DateTimeContext {\n  abstract override DATE_TIME(): TerminalNode;\n}\n\nabstract class VehicleImpactCtx extends T6TriggerParser.VehicleImpactContext {\n  abstract override INT(): TerminalNode;\n}\n\nexport abstract class NumberCtx extends T6TriggerParser.NumberContext {\n  abstract override INT(): TerminalNode;\n\n  abstract override DECIMAL(): TerminalNode;\n}\n\nabstract class NumbersCtx extends T6TriggerParser.NumbersContext {\n  abstract override number: <T>(i?: T) => T extends number ? NumberCtx : NumberCtx[];\n  // prettier-ignore\n  abstract override SEPARATOR: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n}\n\nexport abstract class FieldCtx extends T6TriggerParser.FieldContext {\n  abstract override IDENTIFIER(): TerminalNode;\n}\n\nexport abstract class OpCtx extends T6TriggerParser.OpContext {\n}\n\nexport abstract class ComparatorCtx extends T6TriggerParser.ComparatorContext {\n  abstract override op(): OpCtx;\n\n  abstract override number(): NumberCtx;\n\n  abstract override dateTime(): DateTimeCtx;\n}\n\nabstract class BinaryCtx extends T6TriggerParser.BinaryContext {\n}\n\nabstract class NotCtx extends T6TriggerParser.NotContext {\n  abstract override numbers(): NumbersCtx;\n\n  abstract override values(): ValuesCtx;\n}\n\nabstract class ComplexCtx extends T6TriggerParser.ComplexContext {\n  abstract override expr(): ExprCtx;\n}\n\nexport abstract class CountCtx extends T6TriggerParser.CountContext {\n  abstract override comparator(): ComparatorCtx;\n\n  abstract override value(): ValueCtx;\n}\n\nexport abstract class CountComplexCtx extends T6TriggerParser.CountComplexContext {\n  abstract override comparator(): ComparatorCtx;\n\n  abstract override expr(): ExprCtx;\n\n  abstract override field(): FieldCtx;\n}\n\nexport abstract class ValueCtx extends T6TriggerParser.ValueContext {\n  abstract override number: <T>(i?: T) => T extends number ? NumberCtx : NumberCtx[];\n  abstract override op: <T>(i?: T) => T extends number ? OpCtx : OpCtx[];\n  abstract override IDENTIFIER: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override LPAREN: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override RPAREN: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override SEPARATOR: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override IF: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override FROM: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override THEN: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override ANY: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override EMPTY: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override NOT: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override COMPLEX: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override COUNT: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override COUNT_COMPLEX: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override DISTINCT: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override IMPACT_SIDES: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override AND: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n  abstract override OR: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n}\n\nabstract class ValuesCtx extends T6TriggerParser.ValuesContext {\n  abstract override value: <T>(i?: T) => T extends number ? ValueCtx : ValueCtx[];\n  abstract override SEPARATOR: <T>(i?: T) => T extends number ? TerminalNode : TTerminalNodes;\n}\n\nexport enum EFieldType {\n  string = 'string',\n  enum = 'enum',\n  integer = 'integer',\n  timestamp = 'timestamp',\n  complex = 'complex',\n  decimal = 'decimal',\n  enum_list = 'enum_list',\n  injury = 'injury',\n  user = 'user',\n  image = 'image',\n  user_list = 'user_list',\n  icd = 'icd',\n  ais = 'ais',\n  custom = 'custom',\n  vehicleImpactType = 'vehicleImpactType',\n  address = 'address',\n}\n\nexport enum ESource {\n  LEXER = 'Lexer',\n  PARSER = 'Parser',\n  EVALUATE_VISITOR = 'EvaluateConditionVisitor',\n  FORMAT_VISITOR = 'FormatConditionVisitor',\n}\n\ninterface IImageModel {\n  imageId: string;\n  imageLabel: string;\n}\n\nexport interface IImageDataValue {\n  images: IImageModel[];\n}\n\nexport interface IVehicleDataValue {\n  isRightHandSide?: boolean;\n  isSeatBelt?: boolean;\n  isHelmet?: boolean;\n  isPassengerPositionKnown?: boolean;\n  isImpactKnown?: boolean;\n  passengerPositions?: number[];\n  impactSides?: number[];\n}\n"],"mappings":"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"}