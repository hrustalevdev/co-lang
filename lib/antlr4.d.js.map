{"version":3,"file":"antlr4.d.js","names":[],"sources":["../src/antlr4.d.ts"],"sourcesContent":["import { default as atn } from 'antlr4/atn/index';\nimport { default as dfa } from 'antlr4/dfa/index';\nimport { default as tree } from 'antlr4/tree/index';\nimport { default as error } from 'antlr4/error/index';\nimport { default as Token } from 'antlr4/Token';\nimport { default as CommonToken } from 'antlr4/CommonToken';\nimport { default as CharStreams } from 'antlr4/CharStreams';\nimport { default as InputStream } from 'antlr4/InputStream';\nimport { default as FileStream } from 'antlr4/FileStream';\nimport { default as CommonTokenStream } from 'antlr4/CommonTokenStream';\nimport { default as Lexer } from 'antlr4/Lexer';\nimport { default as Parser } from 'antlr4/Parser';\nimport { default as PredictionContextCache } from 'antlr4/atn/PredictionContextCache';\nimport { default as Interval } from 'antlr4/misc/Interval';\nimport { default as IntervalSet } from 'antlr4/misc/IntervalSet';\nimport { default as LL1Analyzer } from 'antlr4/atn/LL1Analyzer';\nimport { default as Utils } from 'antlr4/utils/index';\nimport RuleContext from 'antlr4/context/RuleContext';\nimport RecognitionException from 'antlr4/error/RecognitionException';\nimport ParseTreeListener from 'antlr4/tree/ParseTreeListener';\nimport TerminalNode from 'antlr4/tree/TerminalNode';\nimport ErrorNode from 'antlr4/tree/ErrorNode';\nimport ParseTree from 'antlr4/tree/ParseTree';\n\ndeclare namespace antlr4 {\n  export { atn };\n  export { dfa };\n  export { tree };\n  export { error };\n  export { Token };\n  export { CommonToken };\n  export { CharStreams };\n  export { InputStream };\n  export { FileStream };\n  export { CommonTokenStream };\n  export { Lexer };\n  export { Parser };\n  export { PredictionContextCache };\n  export { Interval };\n  export { IntervalSet };\n  export { LL1Analyzer };\n  export { Utils };\n  export class ParserRuleContext extends RuleContext {\n    static readonly EMPTY: ParserRuleContext;\n\n    readonly start: Token;\n    readonly stop: Token;\n    readonly ruleIndex: number;\n    readonly exception: RecognitionException;\n\n    constructor(parent?: RuleContext, invokingState?: number);\n\n    copyFrom(ctx: ParserRuleContext): void;\n\n    enterRule(listener: ParseTreeListener): void;\n\n    exitRule(listener: ParseTreeListener): void;\n\n    addChild(child: ParserRuleContext): TerminalNode;\n\n    removeLastChild(): void;\n\n    addTokenNode(token: Token): Token;\n\n    addErrorNode(badToken: Token): ErrorNode;\n\n    getChild<T extends ParseTree>(i: number, type?: { new (...args: any[]): T }): T | null;\n\n    getToken(ttype: number, i: number): TerminalNode;\n\n    getTokens(ttype: number): Token[];\n\n    getTypedRuleContext<T extends ParserRuleContext>(cxtType: { new (...args: any[]): T }, i: number): T;\n\n    getTypedRuleContexts<T extends ParserRuleContext>(cxtType: { new (...args: any[]): T }): T[];\n  }\n}\n\nexport default antlr4;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAqD"}