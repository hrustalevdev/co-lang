{"version":3,"file":"Lexer.js","names":["InputStream","antlr4","Lexer","condition","chars","lexer","T6TriggerLexer","removeErrorListeners","errorListener","ErrorListener","getInstance","addErrorListener"],"sources":["../src/Lexer.ts"],"sourcesContent":["import antlr4 from 'antlr4';\nimport T6TriggerLexer from './gen/T6TriggerLexer';\nimport { ErrorListener } from './ErrorListener';\n\nconst { InputStream } = antlr4;\n\nexport class Lexer {\n  lexer: T6TriggerLexer;\n\n  constructor(condition: string) {\n    /** Creating a stream of characters from the condition (making a copy of the condition characters) */\n    const chars = new InputStream(condition, true);\n    /** Pass the stream of characters to the Lexer, which converts them into tokens */\n    const lexer = new T6TriggerLexer(chars);\n    lexer.removeErrorListeners();\n    const errorListener = ErrorListener.getInstance();\n    lexer.addErrorListener(errorListener);\n    this.lexer = lexer;\n  }\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AAAgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhD,IAAQA,WAAW,GAAKC,cAAM,CAAtBD,WAAW;AAAY,IAElBE,KAAK,6BAGhB,eAAYC,SAAiB,EAAE;EAAA;EAC7B;EACA,IAAMC,KAAK,GAAG,IAAIJ,WAAW,CAACG,SAAS,EAAE,IAAI,CAAC;EAC9C;EACA,IAAME,KAAK,GAAG,IAAIC,uBAAc,CAACF,KAAK,CAAC;EACvCC,KAAK,CAACE,oBAAoB,EAAE;EAC5B,IAAMC,aAAa,GAAGC,4BAAa,CAACC,WAAW,EAAE;EACjDL,KAAK,CAACM,gBAAgB,CAACH,aAAa,CAAC;EACrC,IAAI,CAACH,KAAK,GAAGA,KAAK;AACpB,CAAC;AAAA"}